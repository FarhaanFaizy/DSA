#include <stdio.h>
int minDistance(int dist[], int vis[],int n)
{
	int min_index,min = 101;
	for (int v = 0; v < n; v++)
		if (vis[v] == 0 && dist[v] <= min){
			min = dist[v];
			min_index = v;
		}
	return min_index;
}
int main()
{
    // int g[4][4] = { { 101,101,101,101},{ 1,101,1,101},{ 101,101,101,1},{ 101,101,101,101}},n=4,src=1,dist[n],vis[n];
    int g[9][9] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
                        { 4, 0, 8, 0, 0, 0, 0, 11, 0 },
                        { 0, 8, 0, 7, 0, 4, 0, 0, 2 },
                        { 0, 0, 7, 0, 9, 14, 0, 0, 0 },
                        { 0, 0, 0, 9, 0, 10, 0, 0, 0 },
                        { 0, 0, 4, 14, 10, 0, 2, 0, 0 },
                        { 0, 0, 0, 0, 0, 2, 0, 1, 6 },
                        { 8, 11, 0, 0, 0, 0, 1, 0, 7 },
                        { 0, 0, 2, 0, 0, 0, 6, 7, 0 } },
    n=9,src=0,dist[n],vis[n];
	for (int i = 0; i < n; i++){
		dist[i] = 101; 
		vis[i] = 0;
	}
	dist[src] = 0;
	printf("i Vertices\t\t\t\t:");
	for (int i = 0; i < n; i++)
		printf("%d\t", i);
	for (int count = 0; count < n - 1; count++) {
		int u = minDistance(dist, vis,n);
		vis[u] = 1;
		for (int v = 0; v < n; v++)
if (!vis[v] && g[u][v]&& dist[u] != 101&& dist[u] + g[u][v] <dist[v])
				dist[v] = dist[u] + g[u][v];
	printf("\n%d Distances from Source\t:",count+1);
	for(int i=0;i<n;i++)
	if(dist[i]!=101)
	    printf("%d\t",dist[i]);
	else
	    printf("∞\t");
	}
	return 0;
}
