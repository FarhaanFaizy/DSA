#include <stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node* next;
}*temp,*newnode,*t1,*t2,*head,*tail;
void create()
{
    int value,n;
    head=NULL;
    printf("\nEnter the number of nodes in your linked list:");
    scanf("%d",&n);
    printf("\nEnter values:");
    for(int i=0;i<n;i++)
    {
        newnode=(struct node*)malloc(sizeof(struct node));
        scanf("\n%d",&value);
        
        newnode->data=value;
        newnode->next=NULL;
        if (head==NULL)
        {
            head=newnode;
            tail=newnode;
        }
        else 
        {
            tail->next=newnode;
            tail=newnode;
        }
    }
}
void display()
{
    temp=head;
    printf("\nElements in the list are ");
    while(temp!=NULL)
    {
        printf("%d ",temp->data);
        temp=temp->next;
    }
}
void ins_beg()
{
    int value;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("\nEnter value to insert at beginning:");
    scanf("%d",&value);
    newnode->data=value;
    newnode->next=head;
    head=newnode;
}
void ins_end()
{
    int value;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("\nEnter value to insert at end:");
    scanf("%d",&value);
    newnode->data=value;
    newnode->next=NULL;
    tail->next=newnode;
    tail=newnode;
}
void insert()
{
    int i,ele,pos,n=0;
    temp=head;
    while(temp!=NULL)
    {
        n++;
        temp=temp->next;
    }
    printf("\nEnter position of insertion :");
    scanf("%d",&pos);
    if(pos==1)
        return ins_beg();
    else if(pos==n+1)
        return ins_end();
    else if(pos>n+1)
        printf("\nWrong position");
    else
    {
        printf("\nEnter element to insert :");
        scanf("%d",&ele);
        newnode=(struct node*)malloc(sizeof(struct node));
        newnode->data=ele;
        newnode->next=NULL;
        for(i=1,temp=head;i<pos-1;i++)
            temp=temp->next;
        newnode->next=temp->next;
        temp->next=newnode;
    }
}
void Delete_pos(int pos)
{
    temp=head;
    if(pos==1)
    {
        head=head->next;
        free(temp);
    }
    else
    {
    for(int i=0;i<pos-2;i++)
        temp=temp->next;
    temp->next=temp->next->next;
    }
}
void Delete_ele()
{
    int ele;
    printf("\nEnter element to delete:");
    scanf("%d",&ele);
    temp=head;
    if(temp->data==ele)
    {
        head=head->next;
        free(temp);
    }
    else if(temp->next->data==ele)
    {
        head->next=head->next->next;
    }
    else
    {
        while(temp->next->data!=ele)
        {
            temp=temp->next;
        }
    temp->next=temp->next->next;
    }
}
void reverse_ll()
{
    struct node *next,*current,*previous=NULL;
    current=head;
    while(current!=NULL)
    {
        next=current->next;
        current->next=previous;
        previous=current;
        current=next;
    }
    head=previous;
}
void remove_dup()
{
    struct node *t=head,*i=NULL,*temp=NULL;
    if(head==NULL)
        return;
    else
    {
        while(t!=NULL)
        {
            temp=t;
            i=t->next;
            while(i!=NULL)
            {
                if(t->data==i->data)
                    temp->next=i->next;
                else
                    temp=i;
                i=i->next;
            }
            t=t->next;
        }
    }
}
void midele()
{
    int i,len=0,flag=0;
    temp=head;
    while(temp!=NULL)
    {
        len++;
        temp=temp->next;
    }
    if(len%2==0)
    {
        flag=1;
    }
    int pos=(len/2);
    temp=head;
    for(i=0;i<pos-1;i++)
            temp=temp->next;
    if(flag==1)
    {
        printf("\nMiddle elememts are:%d and %d ",temp->data,temp->next->data);
    }
    else
    {
        temp=temp->next;
        printf("\nMiddle element is %d ",temp->data);
    }
}
void sort()
{
    int Swp;
    t1=head;
    while(t1->next!=NULL)
    {
        t2=t1->next;
        while(t2!=NULL)
        {
            if(t1->data > t2->data)
            {
                Swp=t2->data;
                t2->data=t1->data;
                t1->data=Swp;
            }
            t2=t2->next;
        }
        t1=t1->next;
    }
}
void del_n_last()
{
    int len=0,n,pos;
    temp=head;
    while(temp!=NULL)
    {
        len++;
        temp=temp->next;
    }
    printf("\nEnter the postion from last to delete the node:");
    scanf("%d",&n);
    pos=len-n+1;
    return Delete_pos(pos);
}
void insert_app_pos()
{
    sort(head);
    temp=head;
    int ele;
    printf("\nEnter element to insert at appropriate position:");
    scanf("%d",&ele);
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=ele;
    newnode->next=NULL;
    if(head->data>ele)
    {
        newnode->next=head;
        head=newnode;
    }
    if(tail->data>ele){
        while(temp->next->data<ele&&temp->next!=tail)
            temp=temp->next;
        newnode->next=temp->next;
        temp->next=newnode;
    }
    if(tail->data<ele)
    {
        tail->next=newnode;
        tail=newnode;
    }
}
int main() 
{
    int ch,lno=0,dno,adno;
    while(1)
    {
        //printf("\n1)Create new linked list\n2)Display a linked list \n3)Insert at beginning \n4)Insert at tail of linked list \n5)Insert node at a specific position of a linked list\n6)Insert node at appropriate position in a sorted linked list\n7)Delete node from a linked list based on position\n8)Delete node from a linked list based on value\n9)Delete duplicate nodes from a linked list\n10)Remove N-th node from the end of a Linked List\n11)Merge two sorted Linked Lists\n12)Find middle element in a Linked List\n13)Reverse a Linked List\n14)Sort the elements in a linked list\n15)Exit the program\nEnter your choice:");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
                create();
                break;
            case 2:
                    display();
                    break;
            case 3:
                ins_beg();
                display();
                break;
            case 4:
                ins_end();
                display();
                break;
            case 5:
                insert();
                display();
                break;
            case 6:
                insert_app_pos();
                display();
                break;
            case 7:
                int pos;
                printf("\nEnter position to delete:");
                scanf("%d",&pos);
                Delete_pos(pos);
                display();
                break;
            case 8:
                Delete_ele();
                display();
            case 9:
                remove_dup();
                display();
                break;
            case 11:
                exit(0);
                break;
            case 10:
                del_n_last();
                display();
                break;
            case 12:
                midele();
                break;
            case 13:
                reverse_ll();
                display();
                break;
            case 14:
                    sort();
                    display();
                    break;
            case 15:
                exit(0);
                break;
            default:
                exit(0);
                break;
        }
    }
}
output:
1
Enter the number of nodes in your linked list:6
Enter values:1 3 2 4 6 5
2
Elements in the list are 1 3 2 4 6 5 
3
Enter value to insert at beginning:7
Elements in the list are 7 1 3 2 4 6 5 
4
Enter value to insert at end:0
Elements in the list are 7 1 3 2 4 6 5 7
5
Enter position of insertion :4
Enter element to insert :6
Elements in the list are 7 1 3 6 2 4 6 5 7 
6
Enter element to insert at appropriate position:9
Elements in the list are 1 2 3 4 5 6 6 7 7 9
7
Enter position to delete:2
Elements in the list are 1 3 4 5 6 6 7 7 9
8
Enter element to delete:5
Elements in the list are 1 3 4 6 6 7 7 9
9
Elements in the list are 1 3 4 6 7 9
10
Enter the postion from last to delete the node:3
Elements in the list are 1 3 4 7 9
12
Middle element is 4
13
Elements in the list are 9 7 4 3 1
14
Elements in the list are 1 3 4 7 9
15